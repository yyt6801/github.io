<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - YYT6801&#39;s Blog</title>
        <link>https://blog.yyt6801.top/posts/</link>
        <description>所有文章 | YYT6801&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>yyt6801@gmail.com (YYT6801)</managingEditor>
            <webMaster>yyt6801@gmail.com (YYT6801)</webMaster><lastBuildDate>Wed, 14 Dec 2022 14:46:55 &#43;0800</lastBuildDate><atom:link href="https://blog.yyt6801.top/posts/" rel="self" type="application/rss+xml" /><item>
    <title>Practical configuration of Nginx</title>
    <link>https://blog.yyt6801.top/posts/nginx/</link>
    <pubDate>Wed, 14 Dec 2022 14:46:55 &#43;0800</pubDate>
    <author>YYT6801</author>
    <guid>https://blog.yyt6801.top/posts/nginx/</guid>
    <description><![CDATA[Nginx操作 1.启动nginx:
在nginx的安装目录
start nginx 或 nginx.exe
2.停止nginx
(stop是快速停止nginx，可能并不保存相关信息；quit是完整有序的停止nginx，并保存相关信息)
nginx.exe -s stop 或 nginx.exe -s quit
3.检查 重启：
nginx -t 修改nginx配置后执行检查配置是否正确
nginx -s reload 重启nginx]]></description>
</item>
<item>
    <title>CMD 常用操作</title>
    <link>https://blog.yyt6801.top/posts/cmd/</link>
    <pubDate>Thu, 08 Dec 2022 17:49:05 &#43;0800</pubDate>
    <author>YYT6801</author>
    <guid>https://blog.yyt6801.top/posts/cmd/</guid>
    <description><![CDATA[autoIP.bat @echo off cd /d %~dp0 %1 start &quot;&quot; mshta vbscript:createobject(&ldquo;shell.application&rdquo;).shellexecute(&quot;&quot;&quot;%~0&quot;&quot;&quot;,&quot;::&quot;,,&ldquo;runas&rdquo;,1)(window.close)&amp;exit netsh interface ip set address name=&ldquo;以太网&rdquo; source=dhcp netsh interface ip set address name=&ldquo;WLAN&rdquo; source=dhcp
renewIP.bat ipconfig/flushdns ipconfig/release ipconfig/renew pause
设置以太网Ip为10.20.32.247.bat netsh interface ip set address name=以太网 source=static addr=10.20.32.247 mask=255.255.255.0 pause
设置无线网wlan的Ip为_10.20.32.252.bat netsh interface ip set address name=WLAN source=static addr=10.20.32.252 mask=255.255.255.0 pause
修改路由表到192.168.1.1.bat cd /d %~dp0 %1 start &quot;&quot; mshta vbscript:createobject(&ldquo;shell.application&rdquo;).shellexecute(&quot;&quot;&quot;%~0&quot;&quot;&quot;,&quot;::&quot;,,&ldquo;runas&rdquo;,1)(window.close)&amp;exit route add 10.151.18.86 192.168.1.1 route add 10.151.18.218 192.168.1.1 route add 10.]]></description>
</item>
<item>
    <title>my Learn Notes</title>
    <link>https://blog.yyt6801.top/posts/my-learn-notes/</link>
    <pubDate>Thu, 08 Dec 2022 17:49:05 &#43;0800</pubDate>
    <author>YYT6801</author>
    <guid>https://blog.yyt6801.top/posts/my-learn-notes/</guid>
    <description><![CDATA[BUPT&mdash; 803计算机学科基础综合 试卷内容结构 数据结构 45分 计算机组成原理 45分 操作系统 35分 计算机网络 25分
试卷题型结构 单项选择题 80分 (40小题，每小题2分) 综合应用题 70分
选择40道(80') 分值构成: 1~11 数据结构22&rsquo; (112) 12~22 计算机组成原理22&rsquo; (112) 23~33 操作系统20&rsquo; (102) 33~40 计算机网络16&rsquo; (82)
大题共有7道题:(70') 分值构成: 2018: 10+13+11+12+7+8+9 2017: 10+13+11+12+7+8+9 2016: 8+15+11+12+7+8+9 41,42&mdash;数据结构23' 43,44&mdash;计算机组成原理23' 45,46&mdash;操作系统15' 47&mdash;计算机网络9'
大题前两道-数据结构题: 2018(10&rsquo;) 1.队列顺序存储-假溢出-解决方法,队列当前长度,判定队空/队满 2018(13&rsquo;) 2.设计算法&mdash;哈系表存储-哈系函数-链地址法处理冲突-设计哈系表的初始化,插入元素和删除元素的算法 2017(10&rsquo;) 有向图::有向图描述，两定点间的权值，画有向图，迪杰斯特拉算法求顶点到顶点的最短距离 2017(13&rsquo;) 设计算法&mdash;Search_Insert非空二叉排序树-查找元素值为e的结点,若存在则返回指针,若不存在则插入一个元素值为e的新结点,并返回新结点的指针 2016(8&rsquo;) 二叉树-先序-中序-后序;画二叉树 2016(15&rsquo;) 设计算法&mdash;邻接矩阵-顶点到顶点有边：求矩阵的传递包：使得若从顶点到顶点有一条或多条路径 大题43,44-计算机组成原理题: 2018(11&rsquo;) 主存地址空间-字节编址-指令Cache和数据Cache分离,数据Cache采用直接映射&hellip;&hellip;&hellip;.补码,行优先存放/列优先存放,主存块对应的Cache行号 2016年803学科综合计算机(个人整理历年考点汇总) 知识点： 数据的存储结构术语： 循环队列？线索树？栈？数组？ 栈-栈满条件 带头节点-单循环链表-非空队列，队列指针，新元素结点， 模式串-nextval数组值 关键字的3阶B树，关键字的结点个数 关键路径-AOE网络， 源点-汇点，最长回路-最短回路 强连通图-边数 顺序存储结构排序算法-关键字比较次数-元素初始排列次序，快速排序、堆排序、直接插入排序、简单选择排序 堆排序-初始堆 二叉排序树-平均查找长度-数量级，顺序查找、折半查找、分块查找 冯·诺依曼计算机-特点： 二进制？存储程序？控制流驱动方式？数据流驱动方式？ 8位计算机存储器按字节编码-存储器单元的值，补码？负数？值？ IEEE754浮点数格式，？尾数-阶码-补码-规格化数-非规格化数？ 八体低位交叉存储器，容量-存储周期-最大带宽 八路组相联Cache块-主存块-字节-标记、组号、块内地址 累加器-堆栈指示器-栈顶单元，进栈操作顺序-出栈操作顺序 四级流水线-浮点加法器-流水线时钟周期-不是流水线方式所需时间 PCI总线特性， 进程从运行状态转为就绪状态的条件 进程-线程 单处理器并发执行进程-最小平均等待时间 分页内存管理系统-物理内存空间大小-逻辑地址空间-页面大小-页表进行逻辑地址到物理地址，定义页框（帧）号的位数 I/O设备中引入缓冲机制的目的 死锁问题处理机制-银行家算法 位图管理磁盘自由空间-磁盘块-位图占用字节数 CPU调度算法-硬实时系统 硬盘调度算法-先来先服务磁盘调度算法（FCFS） UDP-七层参考模型 带宽-信道-二进制信号-信噪比-最大传输速率 信道噪音-数据链路层成帧方法 链路状态路由选择协议 IP-子网掩码-广播数据-IP数据报目的地址 IPv6地址长度 TCP协议-慢启动算法 DNS]]></description>
</item>
<item>
    <title>URL编码表</title>
    <link>https://blog.yyt6801.top/posts/url%E7%BC%96%E7%A0%81%E8%A1%A8/</link>
    <pubDate>Thu, 08 Dec 2022 17:49:05 &#43;0800</pubDate>
    <author>YYT6801</author>
    <guid>https://blog.yyt6801.top/posts/url%E7%BC%96%E7%A0%81%E8%A1%A8/</guid>
    <description><![CDATA[URL编码表 字符 编码 backspace %08 tab %09 linefeed %0A creturn %0D space %20 ! %21 &quot; %22 # %23 $ %24 % %25 &amp; %26 ' %27 ( %28 ) %29 * %2A + %2B , %2C - %2D . %2E / %2F 0 %30 1 %31 2 %32 3 %33 4 %34 5 %35 6 %36 7 %37 8 %38 9 %39 : %3A ; %3B &lt; %3C = %3D &gt; %3E @ %40 A %41 B %42 C %43 D %44 E %45 F %46 G %47 H %48 I %49 J %4A K %4B L %4C M %4D N %4E O %4F P %50 Q %51 R %52 S %53 T %54 U %55 V %56 W %57 X %58 Y %59 Z %5A [ %5B \ %5C ] %5D ^ %5E _ %5F ` %60 a %61 b %62 c %63 d %64 e %65 f %66 g %67 h %68 i %69 j %6A k %6B l %6C m %6D n %6E o %6F p %70 q %71 r %72 s %73 t %74 u %75 v %76 w %77 x %78 y %79 z %7A { %7B } %7D ~ %7E ￠ % A2 ￡ % A3 ￥ % A5 § %A7 « %AB ¬ %AC ˉ %AD o %B0 ± %B1 a %B2 , %B4 μ %B5 » %BB ¼ %BC ½ %BD ¿ %BF à %C0 á %C1 Ã %C3 Ä %C4 Å %C5 Æ %C6 Ç %C7 è %C8 é　%C9 ê %CA Ë %CB ì　%CC í %CD Î %CE Ï %CF D %D0 Ñ %D1 ò %D2 ó %D3 Ô %D4 Õ %D5 Ö %D6 Ø %D8 ù %D9 ú　%DA Û %DB ü %DC Y %DD T %DE ß %DF à %E0 á %E1 a %E2 ã %E3 ä %E4 å %E5 æ %E6 ç %E7 è %E8 é %E9 ê %EA ë %EB ì %EC í %ED î %EE ï %EF e %F0 ñ %F1 ò %F2 ó %F3 ô %F4 õ %F5 ö %F6 ÷　%F7 ø %F8 ù %F9 ú　%FA û %FB ü %FC y %FD t %FE ÿ %FF ]]></description>
</item>
<item>
    <title>Useful Tools and Software</title>
    <link>https://blog.yyt6801.top/posts/usefultools-and-software/</link>
    <pubDate>Thu, 08 Dec 2022 17:49:05 &#43;0800</pubDate>
    <author>YYT6801</author>
    <guid>https://blog.yyt6801.top/posts/usefultools-and-software/</guid>
    <description><![CDATA[资源、软件工具清单(持续完善中) 在线工具网址 搜索引擎/资源网站 学习技术过程我们经常需要使用搜索引擎来检索资料，国内常用的也就是某度了。 当然有条件的话，搜索引擎首先还是推荐使用 Google，如果没办法使用，可以使用以下几个作为备用：
Bing 国际版
比某度好用，之前还被停用了几天，最近可以了。
DuckDuckGo
从官网的介绍来看这个搜索引擎不收集用户信息，而且没有广告。
Stack Overflow
我们如果常用 Google，很多技术问题的答案就在这个网站上，如果你无法使用 Google 可以在这个网站上直接检索就好了。
Gitlogs
Gitlogs 是专门针对 GitHub 项目的搜索引擎，我们通过他可以快速找到想要项目。
资源搜索引擎 jiumo search文档搜索引擎 鸠摩搜书
可以用来找一些技术文档手册，很多在百度网盘里。
Ebooke
Ebookee 是一个基于互联网并提供免费电子图书下载的搜索引擎网站。
Iconfinder图标搜索
用来查找 logo 图片。
TinEye
用图片来检索图片，我们可以上传图片或输入图片的 URL 来检索。
SemanticScholar
SemanticScholar 是一个免费学术搜索引擎，其检索结果来自于期刊、学术会议资料或者是学术机构的文献。
LibreStock
LibreStock 上可以检索一些优质的高清图片。
CC Search
CC Search 上搜索到的图片资源都是无版权的，我们可以免费的使用。
Pexels
高质量的图片网站，可以免费使用。
Unsplash
免费高清素材网站。
The App Store
The App Store 是一个针对苹果手机、iPad、Mac 设备的应用搜索工具。
工具类 图片相关工具 TinyPNG 免费的在线图片压缩工具，压缩率高，无损画质，直接拖拽使用，很方便。
picdiet 独特且强悍的JavaScript 算法，能极速压缩 80% 的图片大小，而不损害其质量。]]></description>
</item>
<item>
    <title>Docker常用操作</title>
    <link>https://blog.yyt6801.top/posts/docker-basic-operation-guide/</link>
    <pubDate>Thu, 01 Dec 2022 01:00:00 &#43;0000</pubDate>
    <author>YYT6801</author>
    <guid>https://blog.yyt6801.top/posts/docker-basic-operation-guide/</guid>
    <description><![CDATA[docker 使用场景: Docker提供了轻量级的虚拟化，它几乎没有任何额外开销，这个特性非常酷。 首先你在享有Docker带来的虚拟化能力的时候无需担心它带来的额外开销。其次，相比于虚拟机，你可以在同一台机器上创建更多数量的容器。 Docker的另外一个优点是容器的启动与停止都能在几秒中内完成。
1. 简化配置 虚拟机的最大好处是能在你的硬件设施上运行各种配置不一样的平台（软件、系统），Docker在降低额外开销的情况下提供了同样的功能。它能让你将运行环境和配置放在代码中然后部署，同一个Docker的配置可以在不同的环境中使用，这样就降低了硬件要求和应用环境之间耦合度。
2. 代码流水线（Code Pipeline）管理 前一个场景对于管理代码的流水线起到了很大的帮助。代码从开发者的机器到最终在生产环境上的部署，需要经过很多的中间环境。而每一个中间环境都有自己微小的差别，Docker给应用提供了一个从开发到上线均一致的环境，让代码的流水线变得简单不少。
3. 提高开发效率 这就带来了一些额外的好处：Docker能提升开发者的开发效率。 不同的开发环境中，我们都想把两件事做好。一是我们想让开发环境尽量贴近生产环境，二是我们想快速搭建开发环境。 理想状态中，要达到第一个目标，我们需要将每一个服务都跑在独立的虚拟机中以便监控生产环境中服务的运行状态。然而，我们却不想每次都需要网络连接，每次重新编译的时候远程连接上去特别麻烦。这就是Docker做的特别好的地方，开发环境的机器通常内存比较小，之前使用虚拟机的时候，我们经常需要为开发环境的机器加内存，而现在Docker可以轻易的让几十个服务在Docker中跑起来。
4. 隔离应用 有很多种原因会让你选择在一个机器上运行不同的应用，比如之前提到的提高开发效率的场景等。 我们经常需要考虑两点，一是因为要降低成本而进行服务器整合，二是将一个整体式的应用拆分成松耦合的单个服务（微服务架构）。如果你想了解为什么松耦合的应用这么重要，请参考Steve Yege的这篇论文，文中将Google和亚马逊做了比较。
5. 整合服务器 正如通过虚拟机来整合多个应用，Docker隔离应用的能力使得Docker可以整合多个服务器以降低成本。由于没有多个操作系统的内存占用，以及能在多个实例之间共享没有使用的内存，Docker可以比虚拟机提供更好的服务器整合解决方案。
6. 调试能力 Docker提供了很多的工具，这些工具不一定只是针对容器，但是却适用于容器。它们提供了很多的功能，包括可以为容器设置检查点、设置版本和查看两个容器之间的差别，这些特性可以帮助调试Bug。你可以在《Docker拯救世界》的文章中找到这一点的例证。
7. 多租户环境 另外一个Docker有意思的使用场景是在多租户的应用中，它可以避免关键应用的重写。我们一个特别的关于这个场景的例子是为IoT（物联网）的应用开发一个快速、易用的多租户环境。这种多租户的基本代码非常复杂，很难处理，重新规划这样一个应用不但消耗时间，也浪费金钱。 使用Docker，可以为每一个租户的应用层的多个实例创建隔离的环境，这不仅简单而且成本低廉，当然这一切得益于Docker环境的启动速度和其高效的diff命令。
8. 快速部署 在虚拟机之前，引入新的硬件资源需要消耗几天的时间。虚拟化技术（Virtualization）将这个时间缩短到了分钟级别。而Docker通过为进程仅仅创建一个容器而无需启动一个操作系统，再次将这个过程缩短到了秒级。这正是Google和Facebook都看重的特性。 你可以在数据中心创建销毁资源而无需担心重新启动带来的开销。通常数据中心的资源利用率只有30%，通过使用Docker并进行有效的资源分配可以提高资源的利用率。
docker使用基本操作 开启docker服务 sudo service docker start 搜索镜像 docker search mongo 拉取镜像到本地 docker pull mongo docker pull mysql:5.6 拉取5.6版本的mysql镜像 查看所有镜像 docker images -a 把镜像做成容器并运行 docker run --name mongodb -v ~/docker/mongo:/data/db -p 27017:27017 -d mongo 通过在创建容器时设置MONGO_INITDB_ROOT_USERNAME和MONGODB_INITDB_ROOT_PASSWORD环境变量来添加初始用户帐户 docker run -d --name mongodb -v /mydata/mongodb/datadb:/data/db -p 27017:27017 -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin --privileged=true mongo 运行mysql5.]]></description>
</item>
<item>
    <title>Git常用操作</title>
    <link>https://blog.yyt6801.top/posts/git-basic-operation-guide/</link>
    <pubDate>Thu, 01 Dec 2022 00:00:00 &#43;0000</pubDate>
    <author>YYT6801</author>
    <guid>https://blog.yyt6801.top/posts/git-basic-operation-guide/</guid>
    <description><![CDATA[1、	在本地新建文件夹，把远程仓库的克隆到本地: a)	git clone URL
2、	本地修改后同步到远程仓库： a)	git status (查看本地是否跟踪到)
b)	git add . (把本地新增的文件添加到缓存)
c)	再执行 git status 查看是否已存放至暂存区
d)	git commit –m &quot;changes&quot; (使用 git add 命令将想要快照的内容写入缓存区， 而执行 git commit 将缓存区内容添加到仓库中。)
e)	git push (把本地代码放到远程仓库)
3、	在本地仓库获取同步最新远程仓库： 方法一：	git fetch 在本地仓库获取最新的代码同步（常用），检查更新，但并未改动本地文件；之后需要加上 git merge 才将本地仓库进行同步。 至此，修改全部结束。
方法二：	直接 git pull 即可实现同步： (在本地pull远程仓库最新的代码到本地仓库，相当于 git fetch + git merge )
4、 取消本地修改内容 git checkout -- filename filename填写需要撤销修改的文件名(需包含路径)，可以清空所修改内容
git checkout .]]></description>
</item>
<item>
    <title>ASCII码值对照表</title>
    <link>https://blog.yyt6801.top/posts/ascii/</link>
    <pubDate>Thu, 01 Dec 2022 00:00:01 &#43;0800</pubDate>
    <author>YYT6801</author>
    <guid>https://blog.yyt6801.top/posts/ascii/</guid>
    <description><![CDATA[//这是整理之后的ASCII码对照表和键值码对照表
ASCII码 Bin Dec Hex 缩写/字符 解释 00000000 0 00 NUL(null) 空字符 00000001 1 01 SOH(start of headling) 标题开始 00000010 2 02 STX (start of text) 正文开始 00000011 3 03 ETX (end of text) 正文结束 00000100 4 04 EOT (end of transmission) 传输结束 00000101 5 05 ENQ (enquiry) 请求 00000110 6 06 ACK (acknowledge) 收到通知 00000111 7 07 BEL (bell) 响铃 00001000 8 08 BS (backspace) 退格 00001001 9 09 HT (horizontal tab) 水平制表符 00001010 10 0A LF (NL line feed, new line) 换行键 00001011 11 0B VT (vertical tab) 垂直制表符 00001100 12 0C FF (NP form feed, new page) 换页键 00001101 13 0D CR (carriage return) 回车键 00001110 14 0E SO (shift out) 不用切换 00001111 15 0F SI (shift in) 启用切换 00010000 16 10 DLE (data link escape) 数据链路转义 00010001 17 11 DC1 (device control 1) 设备控制1 00010010 18 12 DC2 (device control 2) 设备控制2 00010011 19 13 DC3 (device control 3) 设备控制3 00010100 20 14 DC4 (device control 4) 设备控制4 00010101 21 15 NAK (negative acknowledge) 拒绝接收 00010110 22 16 SYN (synchronous idle) 同步空闲 00010111 23 17 ETB (end of trans.]]></description>
</item>
<item>
    <title>笔记整合记录</title>
    <link>https://blog.yyt6801.top/posts/my-notes/</link>
    <pubDate>Thu, 01 Dec 2022 00:00:01 &#43;0800</pubDate>
    <author>YYT6801</author>
    <guid>https://blog.yyt6801.top/posts/my-notes/</guid>
    <description><![CDATA[需求：我的笔记需要有的功能 搜索查询 云同步 图片/文件 直接拖拽，无需oss 表格格式 代码格式化 解决方案：目前的笔记方案： 笔记使用Obsidian编辑 使用坚果云同步content文件夹 Hugo将笔记创建为静态Blog 将静态Blog 发布于 github pages 及时整理，知识沉淀 ]]></description>
</item>
</channel>
</rss>
